#Set sources
FILE(GLOB SOURCES *.c)
LIST(APPEND MCL_CORE_SOURCES ${SOURCES})

SET(MCL_CORE_SOURCES ${MCL_CORE_SOURCES} CACHE INTERNAL "MCL_CORE_SOURCES" FORCE)
SET(MCL_CRYPTO_DEFAULT "openssl")
SET(MCL_HTTP_CLIENT_DEFAULT "curl")
SET(MCL_FILE_UTIL_DEFAULT "standard")
SET(MCL_MEMORY_DEFAULT "standard")
SET(MCL_CORE_UTILITY_SOURCE "")
SET(MCL_CORE_UTILITY_INTERNAL_HEADERS "")
SET(MCL_CORE_UTILITY_HEADERS "")

LIST(APPEND MCL_CORE_UTILITY_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/json_util.c")
LIST(APPEND MCL_CORE_UTILITY_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/list.c")
LIST(APPEND MCL_CORE_UTILITY_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/log_util.c")
LIST(APPEND MCL_CORE_UTILITY_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/string_util.c")
LIST(APPEND MCL_CORE_UTILITY_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/time_util.c")
LIST(APPEND MCL_CORE_UTILITY_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/core_common.c")
LIST(APPEND MCL_CORE_UTILITY_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/memory/${MCL_MEMORY_DEFAULT}/memory.c")
LIST(APPEND MCL_CORE_UTILITY_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/file_util/${MCL_FILE_UTIL_DEFAULT}/file_util.c")

LIST(APPEND MCL_CORE_UTILITY_INTERNAL_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/json_util.h")
LIST(APPEND MCL_CORE_UTILITY_INTERNAL_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/list.h")
LIST(APPEND MCL_CORE_UTILITY_INTERNAL_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/log_util.h")
LIST(APPEND MCL_CORE_UTILITY_INTERNAL_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/string_util.h")
LIST(APPEND MCL_CORE_UTILITY_INTERNAL_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/core_common.h")

LIST(APPEND MCL_CORE_UTILITY_HEADERS "${MCL_CORE_CMAKE_ROOT_DIR}/include/mcl_core/mcl_json_util.h")
LIST(APPEND MCL_CORE_UTILITY_HEADERS "${MCL_CORE_CMAKE_ROOT_DIR}/include/mcl_core/mcl_list.h")
LIST(APPEND MCL_CORE_UTILITY_HEADERS "${MCL_CORE_CMAKE_ROOT_DIR}/include/mcl_core/mcl_log_util.h")
LIST(APPEND MCL_CORE_UTILITY_HEADERS "${MCL_CORE_CMAKE_ROOT_DIR}/include/mcl_core/mcl_string_util.h")
LIST(APPEND MCL_CORE_UTILITY_HEADERS "${MCL_CORE_CMAKE_ROOT_DIR}/include/mcl_core/mcl_core_common.h")

SET(MCL_CORE_UTILITY_SOURCE ${MCL_CORE_UTILITY_SOURCE} CACHE INTERNAL "MCL_CORE_UTILITY_SOURCE" FORCE)
SET(MCL_CORE_UTILITY_INTERNAL_HEADERS ${MCL_CORE_UTILITY_INTERNAL_HEADERS} CACHE INTERNAL "MCL_CORE_UTILITY_INTERNAL_HEADERS" FORCE)
SET(MCL_CORE_UTILITY_HEADERS ${MCL_CORE_UTILITY_HEADERS} CACHE INTERNAL "MCL_CORE_UTILITY_HEADERS" FORCE)

IF(NOT DEFINED MCL_CRYPTO)
	SET(MCL_CRYPTO ${MCL_CRYPTO_DEFAULT})
ENDIF()

IF(IS_ABSOLUTE ${MCL_CRYPTO})
	IF(NOT IS_DIRECTORY ${MCL_CRYPTO})
		MESSAGE(FATAL_ERROR "Invalid crypto setting:${MCL_CRYPTO}")
	ENDIF()
ELSE()
	SET(MCL_CRYPTO "crypto/${MCL_CRYPTO}")
	IF(NOT IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/${MCL_CRYPTO}")
		MESSAGE(FATAL_ERROR "Invalid crypto setting:${MCL_CRYPTO}")
	ENDIF()
ENDIF()

IF(NOT DEFINED MCL_HTTP_CLIENT)
	SET(MCL_HTTP_CLIENT ${MCL_HTTP_CLIENT_DEFAULT})
ENDIF()

IF(IS_ABSOLUTE ${MCL_HTTP_CLIENT})
	IF(NOT IS_DIRECTORY ${MCL_HTTP_CLIENT})
		MESSAGE(FATAL_ERROR "Invalid HTTP client setting:${MCL_HTTP_CLIENT}")
	ENDIF()
ELSE()
	SET(MCL_HTTP_CLIENT "http_client/${MCL_HTTP_CLIENT}")
	IF(NOT IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/${MCL_HTTP_CLIENT}")
		MESSAGE(FATAL_ERROR "Invalid HTTP client setting:${MCL_HTTP_CLIENT}")
	ENDIF()
ENDIF()

IF(NOT DEFINED MCL_FILE_UTIL)
	SET(MCL_FILE_UTIL ${MCL_FILE_UTIL_DEFAULT})
ENDIF()

IF(IS_ABSOLUTE ${MCL_FILE_UTIL})
	IF(NOT IS_DIRECTORY ${MCL_FILE_UTIL})
		MESSAGE(FATAL_ERROR "Invalid file util setting:${MCL_FILE_UTIL}")
	ENDIF()
ELSE()
	SET(MCL_FILE_UTIL "file_util/${MCL_FILE_UTIL}")
	IF(NOT IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/${MCL_FILE_UTIL}")
		MESSAGE(FATAL_ERROR "Invalid file util setting:${MCL_FILE_UTIL}")
	ENDIF()
ENDIF()

IF(NOT DEFINED MCL_MEMORY)
	SET(MCL_MEMORY ${MCL_MEMORY_DEFAULT})
ENDIF()

IF(IS_ABSOLUTE ${MCL_MEMORY})
	IF(NOT IS_DIRECTORY ${MCL_MEMORY})
		MESSAGE(FATAL_ERROR "Invalid memory setting:${MCL_MEMORY}")
	ENDIF()
ELSE()
	SET(MCL_MEMORY "memory/${MCL_MEMORY}")
	IF(NOT IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/${MCL_MEMORY}")
		MESSAGE(FATAL_ERROR "Invalid memory setting:${MCL_MEMORY}")
	ENDIF()
ENDIF()

ADD_SUBDIRECTORY(${MCL_CRYPTO})
ADD_SUBDIRECTORY(${MCL_HTTP_CLIENT})
ADD_SUBDIRECTORY(${MCL_FILE_UTIL})
ADD_SUBDIRECTORY(${MCL_MEMORY})

#Add crypto include directories, libraries and sources
LIST(APPEND MCL_CORE_INCLUDE_DIRECTORIES ${MCL_CRYPTO_INCLUDE_DIRECTORIES})
LIST(APPEND MCL_CORE_LIBS ${MCL_CRYPTO_LIBRARIES})
LIST(APPEND MCL_CORE_SOURCES ${MCL_CRYPTO_SOURCES})

#Add HTTP client include directories, libraries and sources
LIST(APPEND MCL_CORE_INCLUDE_DIRECTORIES ${MCL_HTTP_CLIENT_INCLUDE_DIRECTORIES})
LIST(APPEND MCL_CORE_LIBS ${MCL_HTTP_CLIENT_LIBRARIES})
LIST(APPEND MCL_CORE_SOURCES ${MCL_HTTP_CLIENT_SOURCES})

#Add file util include directories, libraries and sources
LIST(APPEND MCL_CORE_INCLUDE_DIRECTORIES ${MCL_FILE_UTIL_INCLUDE_DIRECTORIES})
LIST(APPEND MCL_CORE_LIBS ${MCL_FILE_UTIL_LIBRARIES})
LIST(APPEND MCL_CORE_SOURCES ${MCL_FILE_UTIL_SOURCES})

#Add memory include directories, libraries and sources
LIST(APPEND MCL_CORE_INCLUDE_DIRECTORIES ${MCL_MEMORY_INCLUDE_DIRECTORIES})
LIST(APPEND MCL_CORE_LIBS ${MCL_MEMORY_LIBRARIES})
LIST(APPEND MCL_CORE_SOURCES ${MCL_MEMORY_SOURCES})

SET(MCL_CORE_SOURCES ${MCL_CORE_SOURCES} CACHE INTERNAL "MCL_CORE_SOURCES" FORCE)

IF(WIN32 OR WIN64)
	#Copy crypto dlls to output folder
	IF(MCL_CRYPTO_DLLS)
		FOREACH(MCL_CRYPTO_DLL ${MCL_CRYPTO_DLLS}) 
			IF(EXISTS ${MCL_CRYPTO_DLL})
				MESSAGE(STATUS "Copying ${MCL_CRYPTO_DLL} to ${MCL_OUTPUT_DIR}")
				FILE(COPY ${MCL_CRYPTO_DLL} DESTINATION ${MCL_OUTPUT_DIR})
			ENDIF()
		ENDFOREACH()
	ENDIF()
	
	#Copy HTTP client dlls to output folder
	IF(MCL_HTTP_CLIENT_DLLS)
		FOREACH(MCL_HTTP_CLIENT_DLL ${MCL_HTTP_CLIENT_DLLS}) 
			IF(EXISTS ${MCL_HTTP_CLIENT_DLL})
				MESSAGE(STATUS "Copying ${MCL_HTTP_CLIENT_DLL} to ${MCL_OUTPUT_DIR}")
				FILE(COPY ${MCL_HTTP_CLIENT_DLL} DESTINATION ${MCL_OUTPUT_DIR})
			ENDIF()
		ENDFOREACH()
	ENDIF()
	
	INSTALL(FILES ${MCL_CRYPTO_DLLS} DESTINATION ${PACKAGE_DESTINATION_LIB})
	INSTALL(FILES ${MCL_HTTP_CLIENT_DLLS} DESTINATION ${PACKAGE_DESTINATION_LIB})
ENDIF()

#Specify library as target
SET(PROJECT_LIBRARY_OUTPUT mcl_core CACHE INTERNAL "PROJECT_LIBRARY_OUTPUT" FORCE)
ADD_LIBRARY(${PROJECT_LIBRARY_OUTPUT} ${MCL_CORE_DYNAMIC_OR_STATIC} $<TARGET_OBJECTS:cJSON> ${MCL_CORE_SOURCES})

SET_TARGET_PROPERTIES(${PROJECT_LIBRARY_OUTPUT} PROPERTIES FOLDER ${MCL_COMPONENT})
SET_TARGET_PROPERTIES(${PROJECT_LIBRARY_OUTPUT} PROPERTIES INSTALL_RPATH_USE_LINK_PATH ON)

IF(NOT MCL_STATICLIB)
	#POSITION_INDEPENDENT_CODE is ON by default for shared libraries
	#But if MCL_CONNECTIVITY is ON, mcl_core will be a static library even MCL_STATICLIB is OFF
	#mcl_core still needs to be position independent in this case
	SET_TARGET_PROPERTIES(${PROJECT_LIBRARY_OUTPUT} PROPERTIES POSITION_INDEPENDENT_CODE ON)
ENDIF()

#Set include directories
LIST(APPEND MCL_CORE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR})
LIST(APPEND MCL_CORE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_BINARY_DIR})
LIST(APPEND MCL_CORE_INCLUDE_DIRECTORIES ${MCL_CORE_CMAKE_ROOT_DIR}/include)
LIST(APPEND MCL_CORE_INCLUDE_DIRECTORIES ${MCL_CORE_CMAKE_ROOT_DIR}/lib)

#Remove duplicates if there is any
LIST(REMOVE_DUPLICATES MCL_CORE_INCLUDE_DIRECTORIES)
LIST(REMOVE_DUPLICATES MCL_CORE_LIBS)

SET(MCL_CORE_INCLUDE_DIRECTORIES ${MCL_CORE_INCLUDE_DIRECTORIES} CACHE INTERNAL "MCL_CORE_INCLUDE_DIRECTORIES" FORCE)
SET(MCL_CORE_LIBS ${MCL_CORE_LIBS} CACHE INTERNAL "MCL_CORE_LIBS" FORCE)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_LIBRARY_OUTPUT} PUBLIC ${MCL_CORE_INCLUDE_DIRECTORIES})

TARGET_LINK_LIBRARIES(${PROJECT_LIBRARY_OUTPUT} ${MCL_CORE_LIBS})

INCLUDE(CheckFunctionExists)

CHECK_FUNCTION_EXISTS(pow POW_FUNCTION_EXISTS)

#If pow function exists, there is no need to link with m library.
IF(NOT POW_FUNCTION_EXISTS)
    #Try adding m to required libraries and check again.
    LIST(APPEND CMAKE_REQUIRED_LIBRARIES m)
    UNSET(POW_FUNCTION_EXISTS CACHE)
    CHECK_FUNCTION_EXISTS(pow POW_FUNCTION_EXISTS)
    
    #If pow function exists now, link with m library.
    IF(POW_FUNCTION_EXISTS)
        SET(POW_NEEDS_LIBM TRUE CACHE BOOL "" FORCE)
        TARGET_LINK_LIBRARIES(${PROJECT_LIBRARY_OUTPUT} m)
    ELSE()
        MESSAGE(FATAL_ERROR "Cannot find pow function even with m library.")
    ENDIF()
ENDIF()

#Install MCL target
INSTALL(TARGETS mcl_core
        RUNTIME DESTINATION "${PACKAGE_DESTINATION_LIB}"
        LIBRARY DESTINATION "${PACKAGE_DESTINATION_LIB}"
        ARCHIVE DESTINATION "${PACKAGE_DESTINATION_LIB}")

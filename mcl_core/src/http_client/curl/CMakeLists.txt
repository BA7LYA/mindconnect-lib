SET(CURL_VERSION_REQUIRED 8.6.0)

#Try to find libcurl.
FIND_PACKAGE(CURL)
IF(CURL_FOUND)
    #OpenSSL may be already found.
    IF(NOT OPENSSL_FOUND)
        FIND_PACKAGE(OpenSSL)
        IF(NOT OPENSSL_FOUND)
            MESSAGE(FATAL_ERROR "libcurl needs OpenSSL!")
        ENDIF()
    ENDIF()
ELSE()
    MESSAGE(FATAL_ERROR "Not found libcurl!")
ENDIF()

#Check version
IF(CURL_VERSION_STRING VERSION_LESS CURL_VERSION_REQUIRED)
    MESSAGE(FATAL_ERROR "Found libcurl version ${CURL_VERSION_STRING} but version ${CURL_VERSION_REQUIRED} is required.")
ELSE()
    MESSAGE(STATUS "Found libcurl version ${CURL_VERSION_STRING}.")
ENDIF()

SET(CMAKE_REQUIRED_INCLUDES ${OPENSSL_INCLUDE_DIR})
CHECK_INCLUDE_FILE("openssl/ssl.h" HAVE_OPENSSL_SSL_H_)

IF(NOT HAVE_OPENSSL_SSL_H_)
    MESSAGE(FATAL_ERROR "Not found required header file.")
ENDIF()

#MCL needs just these three to be set in PARENT_SCOPE.
#You may use FIND_PACKAGE like in this case or just manually set.
SET(MCL_HTTP_CLIENT_INCLUDE_DIRECTORIES ${CURL_INCLUDE_DIRS} ${OPENSSL_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR} PARENT_SCOPE)
SET(MCL_HTTP_CLIENT_LIBRARIES ${CURL_LIBRARIES} ${OPENSSL_LIBRARIES} PARENT_SCOPE)
SET(MCL_HTTP_CLIENT_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/http_client_libcurl.c" PARENT_SCOPE)

IF(WIN32 OR WIN64)
    #This is not needed for compiling, you can manually copy dlls when needed.
    #Also if you are using static library, there is no need to set MCL_HTTP_CLIENT_DLLS.
    LIST(GET CURL_LIBRARIES 0 CURL_LIBRARY)
    GET_FILENAME_COMPONENT(CURL_LIBRARY_FOLDER ${CURL_LIBRARY} DIRECTORY)
    GET_FILENAME_COMPONENT(CURL_FOLDER ${CURL_LIBRARY_FOLDER} DIRECTORY)    
    FILE(GLOB_RECURSE LIBCURL_DLL ${CURL_FOLDER}/libcurl*.dll)
    
    GET_FILENAME_COMPONENT(OPENSSL_LIBRARY_FOLDER ${OPENSSL_CRYPTO_LIBRARY} DIRECTORY)
    GET_FILENAME_COMPONENT(OPENSSL_FOLDER ${OPENSSL_LIBRARY_FOLDER} DIRECTORY)
    FILE(GLOB_RECURSE OPENSSL_CRYPTO_DLL ${OPENSSL_FOLDER}/libcrypto*.dll)
    FILE(GLOB_RECURSE OPENSSL_SSL_DLL ${OPENSSL_FOLDER}/libssl*.dll)
    SET(MCL_HTTP_CLIENT_DLLS ${LIBCURL_DLL} ${OPENSSL_CRYPTO_DLL} ${OPENSSL_SSL_DLL} PARENT_SCOPE)
ENDIF()
